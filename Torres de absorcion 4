### Problema de absorción: Recuperación de Amoniaco en Columna de Absorción
# Datos del problema:
# Mezcla gaseosa: Amoniaco-Aire (15% en volumen de amoniaco)
# Se desea recuperar el 95% del amoniaco con agua como absorbente
# Alimentación: 100 moles
# Condiciones a evaluar:
# a) 0°C y 1 atm
# b) 20°C y 1 atm
# c) 20°C y 2 atm

# 1. Datos iniciales
alimento_total <- 100  # moles de alimentación total
fraccion_amoniaco <- 0.15  # Fracción molar de amoniaco en la alimentación
recuperacion_amoniaco <- 0.95  # Se desea recuperar el 95% del amoniaco
moles_amoniaco_inicial <- alimento_total * fraccion_amoniaco  # moles de amoniaco iniciales
moles_amoniaco_final <- moles_amoniaco_inicial * (1 - recuperacion_amoniaco)  # moles de amoniaco restantes

# 2. Tabla de constantes de Henry aproximadas (mol/L*atm)
constantes_Henry <- data.frame(
  temperatura = c(0, 20, 20),
  presion = c(1, 1, 2),
  H = c(58.0, 57.0, 57.0 / 2)
)

# 3. Función para calcular la cantidad mínima de agua
determinar_agua_minima <- function(temperatura, presion) {
  # Buscar la constante de Henry correspondiente
  H <- constantes_Henry$H[constantes_Henry$temperatura == temperatura & constantes_Henry$presion == presion]
  
  if (length(H) == 0) {
    stop("Condiciones no definidas")
  }
  
  # Cálculo de moles de agua mínima
  agua_minima <- (moles_amoniaco_inicial - moles_amoniaco_final) / H
  return(agua_minima)
}

# 4. Cálculos para las tres condiciones
agua_0C_1atm <- determinar_agua_minima(0, 1)
agua_20C_1atm <- determinar_agua_minima(20, 1)
agua_20C_2atm <- determinar_agua_minima(20, 2)

# 5. Resultados
cat("Cantidad mínima de agua a emplear:")
cat("\na) A 0°C y 1 atm:", round(agua_0C_1atm, 2), "moles")
cat("\nb) A 20°C y 1 atm:", round(agua_20C_1atm, 2), "moles")
cat("\nc) A 20°C y 2 atm:", round(agua_20C_2atm, 2), "moles")

# Explicación de elementos nuevos en el código:
# - `data.frame()`: Se usa para organizar datos en forma de tabla, en este caso las constantes de Henry.
# - `length(H) == 0`: Verifica si la búsqueda de la constante de Henry resultó en un valor válido.
# - `stop()`: Detiene la ejecución del código si las condiciones no están definidas.
# - `cat()`: Imprime múltiples líneas de texto de manera más ordenada.
# - `round()`: Redondea los valores numéricos para mejor presentación en pantalla.
